import cv2
import asyncio
import websockets
import json
import base64
import numpy as np
import time  # Add this import

class StereoStreamer:
    def __init__(self, camera_id=0, max_attempts=5, delay_between_attempts=2):
        self.camera = None
        for attempt in range(max_attempts):
            self.camera = cv2.VideoCapture(camera_id)
            if self.camera.isOpened():
                print(f"Tentativo {attempt + 1} di {max_attempts} andato a buon fine.")

                break
            else:
                print(f"Tentativo {attempt + 1} di {max_attempts} fallito. Riprovo tra {delay_between_attempts} secondi...")
                self.camera.release()
                time.sleep(delay_between_attempts)
        
        if not self.camera.isOpened():
            raise Exception("Impossibile aprire la fotocamera dopo diversi tentativi.")
        
        # Imposta la risoluzione nativa della ZED
        self.camera.set(cv2.CAP_PROP_FRAME_WIDTH, 2560)
        self.camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)


    def split_stereo_frame(self, frame):
        # Dividi il frame in due met√† (sinistra e destra)
        height = frame.shape[0]
        width = frame.shape[1] // 2
        left = frame[:, :width]
        right = frame[:, width:]
        return left, right
        
    async def send_frames(self, websocket):
        try:
            while True:
                ret, frame = self.camera.read()
                if not ret:
                    print("Errore nella lettura del frame")
                    break
                
                # Dividi il frame stereo
                left_frame, right_frame = self.split_stereo_frame(frame)
                
                # Comprimi entrambi i frame
                _, left_buffer = cv2.imencode('.jpg', left_frame, [cv2.IMWRITE_JPEG_QUALITY, 80])
                _, right_buffer = cv2.imencode('.jpg', right_frame, [cv2.IMWRITE_JPEG_QUALITY, 80])
                
                # Converti in base64
                left_b64 = base64.b64encode(left_buffer).decode('utf-8')
                right_b64 = base64.b64encode(right_buffer).decode('utf-8')
                
                # Invia entrambi i frame con un timestamp per sincronizzazione
                timestamp = time.time()
                await websocket.send(json.dumps({
                    'type': 'stereo_frame',
                    'timestamp': timestamp,
                    'left': left_b64,
                    'right': right_b64
                }))
                
                # Circa 30 FPS
                await asyncio.sleep(0.033)
                
        except websockets.exceptions.ConnectionClosed:
            print("Client disconnesso")
        finally:
            self.camera.release()

async def server(websocket, path):
    streamer = StereoStreamer()
    await streamer.send_frames(websocket)

if __name__ == "__main__":
    server = websockets.serve(server, "0.0.0.0", 8765)
    print("Server stereo avviato su ws://0.0.0.0:8765")
    asyncio.get_event_loop().run_until_complete(server)
    asyncio.get_event_loop().run_forever()